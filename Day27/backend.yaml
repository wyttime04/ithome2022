apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-data
  namespace: test-web
  labels:
    app: backend-data
spec:
  storageClassName: nfs-client
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: test-web
  labels:
    app: backend
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
    spec:
      imagePullSecrets:
        - name: test-web-robot
      initContainers:
        - name: init
          image: alpine:3.16.2
          command: ["/bin/sh"]
          args:
            - "-c"
            - "[ ! -e /app/data/todos.json ] && echo [] > /app/data/todos.json || true"
          volumeMounts:
            - name: data
              mountPath: /app/data
      containers:
        - name: backend
          image: harbor.example.domain.com/test-web/test-backend:dev
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          env:
            - name: HOST_PORT
              value: "80"
          ports:
            - containerPort: 80
              name: backend
          volumeMounts:
            - name: data
              mountPath: /app/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: backend-data
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: test-web
spec:
  selector:
    app: backend
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: backend
      protocol: TCP
      port: 80
      targetPort: 80
